#!/bin/bash

usage() {
    echo "Usage: $(basename "$0") SOURCE_DIR [OPTIONS]"
    echo
    echo "Options:"
    echo "  -e EXT      Extract files with extension EXT (can specify multiple)"
    echo "  -f FILE     Extract specific file (can be specified multiple times)"
    echo "  -x FILE     Exclude specific file"
    echo "  -X DIR      Exclude directories (can specify multiple)"
    echo "  -o DIR      Output directory (default: ~/Desktop/extracted_files)"
    echo "  -t          Update tree file"
    echo "  --help      Show this help message"
    exit 1
}

# Initialize arrays for extensions and files
extensions=()
files=()
exclude_files=()
exclude_dirs=()
output_dir="$HOME/Desktop/extracted_files"
source_dir=""
update_tree=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -e)
            while [[ $# -gt 1 && ! $2 =~ ^- ]]; do
                shift
                extensions+=("$1")
            done
            ;;
        -f)
            shift
            [[ $# -eq 0 ]] && usage
            files+=("$1")
            ;;
        -x)
            shift
            [[ $# -eq 0 ]] && usage
            exclude_files+=("$1")
            ;;
        -X)
            while [[ $# -gt 1 && ! $2 =~ ^- ]]; do
                shift
                exclude_dirs+=("$1")
            done
            ;;
        -o)
            shift
            [[ $# -eq 0 ]] && usage
            output_dir="$1"
            ;;
        -t)
            update_tree=true
            ;;
        --help)
            usage
            ;;
        -*)
            echo "Error: Unknown option: $1" >&2
            usage
            ;;
        *)
            if [ -z "$source_dir" ]; then
                source_dir="$1"
            else
                echo "Error: Multiple source directories specified" >&2
                usage
            fi
            ;;
    esac
    shift
done

# Validate inputs
if [ -z "$source_dir" ]; then
    echo "Error: No source directory specified" >&2
    usage
fi

if [ -z "$output_dir" ]; then
    echo "Error: Invalid output directory" >&2
    usage
fi

if [ ${#extensions[@]} -eq 0 ] && [ ${#files[@]} -eq 0 ]; then
    echo "Error: No extensions (-e) or files (-f) specified" >&2
    usage
fi

# Process tree file if flag is set
if [ "$update_tree" = true ]; then
    if ! command -v tree &> /dev/null; then
        echo "Warning: tree command not found. Skipping tree update."
    else
        echo "Updating tree file..."
        tree "$source_dir" > "$source_dir/tree"
    fi
fi

# Create output directory
mkdir -p "$output_dir"

# Function to check if file should be excluded
should_exclude() {
    local file="$1"
    local basename
    basename=$(basename "$file")
    local dirname
    dirname=$(dirname "$file")
    
    # Check excluded files
    for excluded in "${exclude_files[@]}"; do
        if [ "$basename" = "$excluded" ]; then
            return 0
        fi
    done
    
    # Check excluded directories
    for excluded in "${exclude_dirs[@]}"; do
        if [[ "$dirname" == *"/$excluded"* ]]; then
            return 0
        fi
    done
    
    return 1
}

# Function to check if file matches criteria
should_extract() {
    local file="$1"
    local basename
    basename=$(basename "$file")
    
    # Check specific files
    if [ ${#files[@]} -gt 0 ]; then
        for target in "${files[@]}"; do
            if [ "$basename" = "$target" ]; then
                return 0
            fi
        done
        return 1
    fi
    
    # Check extensions
    for ext in "${extensions[@]}"; do
        if [[ "$file" == *".$ext" ]]; then
            return 0
        fi
    done
    
    return 1
}

# Function to handle filename conflicts
get_unique_filename() {
    local target="$1"
    local base dir ext counter
    dir=$(dirname "$target")
    base=$(basename "$target")
    ext=""
    
    # Extract extension if it exists
    if [[ "$base" == *.* ]]; then
        ext=".${base##*.}"
        base="${base%.*}"
    fi
    
    counter=1
    while [ -e "$dir/$base$ext" ]; do
        base="${base%_*}_$counter"
        ((counter++))
    done
    
    echo "$dir/$base$ext"
}

# Build the prune conditions from exclude_dirs array
prune_conditions=""
if [ ${#exclude_dirs[@]} -gt 0 ]; then
    prune_conditions="-type d \( "
    for i in "${!exclude_dirs[@]}"; do
        if [ $i -gt 0 ]; then
            prune_conditions+=" -o "
        fi
        prune_conditions+="-name \"${exclude_dirs[$i]}\""
    done
    prune_conditions+=" \) -prune -o "
fi

# Print the output directory before starting extraction
echo "Files extracted to: $output_dir"

# Use the constructed prune conditions in find
while IFS= read -r -d '' file; do
    if should_extract "$file" && ! should_exclude "$file"; then
        basename=$(basename "$file")
        target="$output_dir/$basename"
        # Handle filename conflicts
        target=$(get_unique_filename "$target")
        cp "$file" "$target"
        echo " -> $basename"
    fi
done < <(eval "find \"\$source_dir\" $prune_conditions -type f -print0")

exit 0